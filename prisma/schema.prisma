generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  // CAMBIO: Renombrado de 'id' a 'locationId' para concordancia con GHL
  locationId   String    @id @unique @map("locationId") // GoHighLevel Location ID
  companyId    String?
  /// ID del usuario (agente) de HighLevel que instaló/autoriza la app. Se usa para atribuir mensajes outbound.
  ghlUserId    String?   @db.Text
  firstName    String?   // Campo para el nombre del usuario de GHL
  lastName     String?   // Campo para el apellido del usuario de GHL
  email        String?   // Campo para el email del usuario de GHL
  accessToken  String    @db.Text
  refreshToken String    @db.Text
  tokenExpiresAt DateTime?
  instances    Instance[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt // Es buena práctica tener un campo de actualización

  @@map("users")
}

enum InstanceState {
  notAuthorized
  qr_code
  authorized
  yellowCard
  blocked
  starting
}

model Instance {
  id                 BigInt       @id @default(autoincrement())

  /// Nombre de la Instancia (identificador único de Evolution API, antes 'idInstance') - No modificable
  instanceName       String       @unique @db.Text

  /// GUID único generado por Evolution API (antes 'instanceGuid'), también conocido como 'instanceId' en Evolution API
  instanceId         String?      @unique @db.Text

  /// Nombre o descripción editable por el cliente desde su panel (ej. 'Numero de Servicio al Cliente 1', 'Flota Personal', etc.)
  customName         String?      @map("name") // Renombrado de 'name' a 'customName' en la interfaz, mapeado a la columna 'name'

  apiTokenInstance   String       @db.Text

  /// Estado de conexión (mapeado de "stateInstance")
  state              InstanceState? @map("stateInstance")

  // CAMBIO: Renombrado de 'userLocationId' a 'locationId' para total concordancia
  locationId         String
  user               User         @relation(fields: [locationId], references: [locationId], onDelete: Cascade) // CAMBIO: Referencia a locationId

  settings           Json?        @default("{}") @db.Json
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt // Es buena práctica tener un campo de actualización

  // CAMBIO: Índice sobre locationId
  @@index([locationId])
  @@map("instances") // Asegúrate de que la tabla se mapee correctamente si usas un nombre diferente por defecto
}
